(function(){const c=document.createElement("link").relList;if(c&&c.supports&&c.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))n(e);new MutationObserver(e=>{for(const t of e)if(t.type==="childList")for(const o of t.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&n(o)}).observe(document,{childList:!0,subtree:!0});function s(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?t.credentials="include":e.crossOrigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function n(e){if(e.ep)return;e.ep=!0;const t=s(e);fetch(e.href,t)}})();function a(l,c){typeof gtag<"u"&&gtag("event",l,c)}document.addEventListener("DOMContentLoaded",()=>{document.querySelectorAll('[data-ga-event="cta_click"]').forEach(e=>{e.addEventListener("click",t=>{const o=e.getAttribute("data-ga-label")||"default";a("cta_click",{event_category:"engagement",event_label:o,value:1}),t.preventDefault(),setTimeout(()=>{window.location.href=e.href},100)})});let c=0;const s=[25,50,75,100];window.addEventListener("scroll",()=>{const e=window.innerHeight,t=document.documentElement.scrollHeight,o=window.scrollY||document.documentElement.scrollTop,i=Math.round((o+e)/t*100);s.forEach(r=>{i>=r&&c<r&&(c=r,a("scroll",{event_category:"engagement",event_label:`${r}%`,value:r}))})});const n=document.querySelector(".comic-container");if(n&&window.innerWidth>=768){document.addEventListener("keydown",t=>{t.key==="ArrowRight"?n.scrollBy({left:600,behavior:"smooth"}):t.key==="ArrowLeft"&&n.scrollBy({left:-600,behavior:"smooth"})});let e=0;n.addEventListener("touchstart",t=>{e=t.touches[0].clientX}),n.addEventListener("touchend",t=>{const o=t.changedTouches[0].clientX,i=e-o;Math.abs(i)>50&&(i>0?n.scrollBy({left:600,behavior:"smooth"}):n.scrollBy({left:-600,behavior:"smooth"}))})}if("loading"in HTMLImageElement.prototype)console.log("Native lazy loading supported");else{const e=document.querySelectorAll('img[loading="lazy"]'),t=new IntersectionObserver(o=>{o.forEach(i=>{if(i.isIntersecting){const r=i.target;r.src=r.src,r.classList.add("loaded"),t.unobserve(r)}})});e.forEach(o=>t.observe(o))}});
